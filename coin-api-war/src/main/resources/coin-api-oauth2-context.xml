<!--
  Copyright 2012 SURFnet bv, The Netherlands

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
  -->
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:security="http://www.springframework.org/schema/security"
       xmlns:oauth2="http://www.springframework.org/schema/security/oauth2"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd

    http://www.springframework.org/schema/security
    http://www.springframework.org/schema/security/spring-security-3.1.xsd
    http://www.springframework.org/schema/security/oauth2
    http://www.springframework.org/schema/security/spring-security-oauth2.xsd">


  <!--
  
  See https://jira.springsource.org/browse/SECOAUTH-321.
  
  Where we had to use /oauth/token because of the rewrite, we now - see issue - can use oauth2/token

  -->
  <http pattern="/oauth2/token" create-session="stateless" authentication-manager-ref="clientAuthenticationManager"
        xmlns="http://www.springframework.org/schema/security">
    <intercept-url pattern="/oauth2/token" access="IS_AUTHENTICATED_FULLY"/>
    <anonymous enabled="false"/>
    <http-basic/>
    <!-- include this only if you need to authenticate clients via request parameters -->
    <custom-filter ref="clientCredentialsTokenEndpointFilter" before="BASIC_AUTH_FILTER"/>

  </http>

  <!-- This was oauth/** 
  
  Does not seem to 'hit' because of oauth2/authorize, 
  because of place of FrameworkEndpointHandlerMapping??? -->
  <security:http pattern="/oauth2/**" authentication-manager-ref="samlAuthenticationManager"
       access-decision-manager-ref="accessDecisionManager"
       entry-point-ref="samlEntryPoint" 
      >
    <security:custom-filter ref="oauth2ProviderFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
    <security:request-cache ref="nullRequestCache" />
  </security:http>

  <!-- Normally, Spring Security remembers the initial request and replays it, after authentication.
  However, our authentication mechanism forwards the state (using SAML RelayState)
  Therefore, the request should not be saved but the new one should just be used. This NullRequestCache effectively does not store the requests.
   -->
  <bean id="nullRequestCache" class="org.springframework.security.web.savedrequest.NullRequestCache" />



  <!-- confirm_access is not filtered by EndpointValidationFilter, therefore an additional config is required. -->
 <!--  <security:http pattern="/oauth2/confirm_access" authentication-manager-ref="samlAuthenticationManager"
       access-decision-manager-ref="accessDecisionManager"
       entry-point-ref="samlEntryPoint"
      >
    <security:custom-filter ref="oauth2ProviderFilter" before="FILTER_SECURITY_INTERCEPTOR"/>
  </security:http> -->

  <bean id="approvalHandler" class="nl.surfnet.coin.api.oauth.ConfigurableTokenServicesUserApprovalHandler">
    <property name="tokenServices" ref="tokenServices" />
    <property name="clientDetailsService" ref="janusClientDetailsService" />
  </bean>

  <bean id="clientCredentialsTokenEndpointFilter"
        class="org.springframework.security.oauth2.provider.client.ClientCredentialsTokenEndpointFilter">
    <constructor-arg value="/oauth2/token"/>    
    <property name="authenticationManager" ref="clientAuthenticationManager"/>
  </bean>

  <authentication-manager id="clientAuthenticationManager" alias="clientAuthenticationManager" xmlns="http://www.springframework.org/schema/security">
    <authentication-provider user-service-ref="clientDetailsUserService"/>
  </authentication-manager>

  <bean id="clientDetailsUserService"
        class="org.springframework.security.oauth2.provider.client.ClientDetailsUserDetailsService">
    <constructor-arg ref="janusClientDetailsService"/>
  </bean>

  <bean id="accessConfirmationController" class="nl.surfnet.coin.api.controller.AccessConfirmationController">
    <property name="clientDetailsService" ref="janusClientDetailsService" />
  </bean>
  
  <bean id="implicitGrantExplicitRedirectResolver" class="nl.surfnet.coin.api.oauth.ImplicitGrantExplicitRedirectResolver"/>

  <oauth2:authorization-server
      token-endpoint-url="/oauth2/token"
      authorization-endpoint-url="/oauth2/authorize"
      user-approval-handler-ref="approvalHandler"
      client-details-service-ref="janusClientDetailsService"
      user-approval-page="redirect:/oauth2/confirm_access"
      token-services-ref="tokenServices"
      redirect-resolver-ref="implicitGrantExplicitRedirectResolver"
      
      >
    <oauth2:authorization-code authorization-code-services-ref="jdbcAuthorizationCodeServices" />
    <oauth2:implicit/>
  </oauth2:authorization-server>


  <oauth2:resource-server id="oauth2ProviderFilter" token-services-ref="tokenServices" />

  <bean id="tokenServices" class="org.springframework.security.oauth2.provider.token.DefaultTokenServices">
    <property name="tokenStore" ref="tokenStore"/>
    <property name="tokenEnhancer" ref="clientMetaDataTokenEnhancer"/>
    <!-- non expiring tokens -->
    <property name="accessTokenValiditySeconds" value="0" />
  </bean>

  <bean id="tokenStore" class="nl.surfnet.coin.api.oauth.OpenConextOauth2JdbcTokenStore">
    <constructor-arg ref="dataSource"/>
  </bean>

  <bean id="jdbcAuthorizationCodeServices" class="org.springframework.security.oauth2.provider.code.JdbcAuthorizationCodeServices">
    <constructor-arg ref="dataSource"/>
  </bean>


  <bean id="accessDecisionManager" class="org.springframework.security.access.vote.UnanimousBased" xmlns="http://www.springframework.org/schema/beans">
    <constructor-arg>
      <list>
        <bean class="org.springframework.security.oauth2.provider.vote.ScopeVoter" />
        <bean class="org.springframework.security.access.vote.RoleVoter" />
        <bean class="org.springframework.security.access.vote.AuthenticatedVoter" />
      </list>
    </constructor-arg>
  </bean>

</beans>